# -*- coding: utf-8 -*-
"""E2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u3ajrVBoolC-aOAooOQnEXGZQdBotIFo
"""

import numpy as np
import matplotlib.pyplot as plt
from google.colab import files

def func(x, t):
    dxdt = t - x * x
    return dxdt

h = 0.05
tmax = 9
t0 = 0
x0 = 1

xarr = []
tarr = []

xarr.append(x0)
tarr.append(t0)

while tarr[-1] < tmax:
    xnew = xarr[-1] + h * func(xarr[-1], tarr[-1])
    xarr.append(xnew)
    tarr.append(tarr[-1] + h)

print(xarr)
print(tarr)

plt.figure(figsize=(10, 6))
plt.plot(tarr,xarr,'.', color='lightgreen')
plt.xlabel('Time (t)')
plt.ylabel('Position (x)')
plt.xlim(-0.1,9.3)
plt.ylim(0.6,3.1)
plt.savefig('tickgraph.png')
plt.show()
#files.download("tickgraph.png")

def func(x, t):
    dxdt = t - x * x
    return dxdt

# Initialize parameters
h = 0.05
tmax = 9
t0 = 0

# Arrays for initial condition x0 values: 3, 1, 0, -0.7, -0.75
x_initial_conditions = [3, 1, 0, -0.7, -0.75]

# Create a figure for plotting
plt.figure(figsize=(10, 6))

# Loop over each initial condition
for x0 in x_initial_conditions:
    xarr = []
    tarr = []
    xarr.append(x0)
    tarr.append(t0)

    # Numerical integration loop
    while tarr[-1] < tmax:
        xnew = xarr[-1] + h * func(xarr[-1], tarr[-1])
        xarr.append(xnew)
        tarr.append(tarr[-1] + h)

    # Plotting each solution for different initial conditions
    plt.plot(tarr, xarr, '.', label=f"x0 = {x0}")

# Add labels, grid, and limits
plt.xlabel('Time (t)')
plt.ylabel('Position (x)')
plt.xlim(-0.1, 9.2)
plt.ylim(-4, 3.2)
plt.legend()

# Save the plot as an image file
plt.savefig('E2.png', bbox_inches='tight')

# Display the plot
plt.show()
#files.download('E2.png')

def func(x, t):
    dxdt = t - x * x
    return dxdt

# Initialize parameters
h = 0.05
tmax = 1000
t0 = 0

# Arrays for initial condition x0 values: 3, 1, 0, -0.7, -0.75
x_initial_conditions = [3, 1, 0, -0.7, -0.75]

# Create a figure for plotting
plt.figure(figsize=(10, 6))

# Loop over each initial condition
for x0 in x_initial_conditions:
    xarr = []
    tarr = []
    xarr.append(x0)
    tarr.append(t0)

    # Numerical integration loop
    while tarr[-1] < tmax:
        xnew = xarr[-1] + h * func(xarr[-1], tarr[-1])
        xarr.append(xnew)
        tarr.append(tarr[-1] + h)

    # Plotting each solution for different initial conditions
    plt.plot(tarr, xarr, '.', label=f"x0 = {x0}")

# Generate and plot the reference curve x = sqrt(t) in dotted red
t_ref = np.arange(0, tmax, h)
x_ref_sqrt_t = np.sqrt(t_ref)
plt.plot(t_ref, x_ref_sqrt_t, 'r--', label='x = sqrt(t)')

# Add labels, grid, and limits
plt.xlabel('Time (t)')
plt.ylabel('Position (x)')
plt.legend()
plt.xlim(-10,1000)
plt.ylim(-20,50)

# Save the plot as an image file
plt.savefig('tmaxgraph.png', bbox_inches='tight')

# Display the plot
plt.show()

# Optionally, if you want to download the file:
#files.download('tmaxgraph.png')