# -*- coding: utf-8 -*-
"""E3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ho2FwNXpnkJqHGSkhwWFwCE53qy3_HC_
"""

import numpy as np
import matplotlib.pyplot as plt
from google.colab import files

import numpy as np
import matplotlib.pyplot as plt

# Euler Method to solve coupled ODEs
def euler_method(h, tmax):
    # Time array
    t_values = np.arange(0, tmax, h)

    # Initialize arrays for x, y, and exact solution
    x_values = np.zeros(len(t_values))
    y_values = np.zeros(len(t_values))
    x_exact = np.sin(t_values)

    # Initial conditions
    x_values[0] = 0  # x(0) = sin(0) = 0
    y_values[0] = 1  # Initial condition for y, such that dy/dt = -x and x = sin(t)

    # Euler integration
    for i in range(1, len(t_values)):
        x_values[i] = x_values[i-1] + h * y_values[i-1]
        y_values[i] = y_values[i-1] - h * x_values[i-1]

    return t_values, x_values, y_values, x_exact

# Plotting function for different step sizes
def plot_solutions(step_sizes, tmax):
    plt.figure(figsize=(10, 6))

    for h in step_sizes:
        t, x_euler, _, x_exact = euler_method(h, tmax)
        plt.plot(t, x_euler, label=f'h={h}')

    # Plot exact solution
    plt.plot(t, x_exact, 'k--', label='Exact x = sin(t)')

    # Labels and legend
    plt.xlabel('Time (t)')
    plt.ylabel('x(t)')
    plt.xlim(-0.2,31.5)
    plt.legend()
    plt.savefig('E3.png', bbox_inches='tight')
    plt.show()

# Parameters
tmax = 10 * np.pi  # To cover 5 cycles of sine wave
step_sizes = [0.05, 0.025, 0.005, 0.0005]

# Run and plot results
plot_solutions(step_sizes, tmax)
#files.download('E3.png')

def euler_method(h, tmax):
    # Time array
    t_values = np.arange(0, tmax, h)

    # Initialize arrays for x, y, and exact solution
    x_values = np.zeros(len(t_values))
    y_values = np.zeros(len(t_values))
    x_exact = np.sin(t_values)

    # Initial conditions
    x_values[0] = 0  # x(0) = sin(0) = 0
    y_values[0] = 1  # Initial condition for y, such that dy/dt = -x and x = sin(t)

    # Euler integration
    for i in range(1, len(t_values)):
        x_values[i] = x_values[i-1] + h * y_values[i-1]
        y_values[i] = y_values[i-1] - h * x_values[i-1]

    return t_values, x_values, x_exact

# Plotting function for error
def plot_error(step_sizes, tmax):
    plt.figure(figsize=(10, 6))

    for h in step_sizes:
        t, x_euler, x_exact = euler_method(h, tmax)
        error = np.abs(x_euler - x_exact)
        plt.plot(t, error, label=f'Difference, h={h}')

    # Labels and legend
    plt.xlabel('Time (t)')
    plt.ylabel('Difference')
    plt.legend()
    plt.xlim(-0.2,31.5)
    plt.yscale('log')  # Log scale to visualize small errors
    plt.savefig('E3diff.png', bbox_inches='tight')
    plt.show()

# Parameters
tmax = 10 * np.pi  # To cover 5 cycles of sine wave
step_sizes = [0.05, 0.025, 0.005, 0.0005]

# Run and plot the error
plot_error(step_sizes, tmax)
#files.download('E3diff.png')